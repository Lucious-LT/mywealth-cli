// npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  organization String?  @db.VarChar(255)
  tenant       String   @db.VarChar(20)
  clientType   String   @db.VarChar(10)
  firstName    String   @db.VarChar(255)
  lastName     String   @db.VarChar(255)
  email        String   @unique @db.VarChar(50)
  mobileNo     String   @db.VarChar(20)
  officeNo     String?  @db.VarChar(20)
  password     String   @db.VarChar(255)
  token        String   @db.VarChar(6)
  expires      DateTime
  leadId       String?  @db.VarChar(36)
  clientId     String?  @db.VarChar(36)

  @@unique([email, tenant])
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  name          String         @db.VarChar(255)
  tenant        String         @db.VarChar(20)
  username      String         @unique @db.VarChar(50)
  email         String?        @db.VarChar(255)
  image         String?        @db.VarChar(255)
  clientId      String         @db.VarChar(36)
  clientCode    String         @db.VarChar(20)
  clientLabel   String         @db.VarChar(255)
  contactId     String         @db.VarChar(36)
  accounts      Account[]
  beneficiaries Beneficiary[]
  billSchedules BillSchedule[]
  transfers     Transfer[]
}

model Account {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  userId       String
  type         String   @db.VarChar(20)
  status       String   @db.VarChar(20)
  productId    String   @db.VarChar(36)
  productCode  String   @db.VarChar(20)
  clientId     String   @db.VarChar(36)
  accountId    String   @db.VarChar(36)
  accountNo    String   @db.VarChar(20)
  accountLabel String   @db.VarChar(255)
  balanceTime  String?  @db.VarChar(255)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([accountId, clientId])
}

model Beneficiary {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  userId           String
  destinationType  String   @db.VarChar(20)
  destAccountNo    String   @db.VarChar(20)
  currency         String   @db.VarChar(3)
  destAccountLabel String   @db.VarChar(255)
  institutionId    String   @db.VarChar(36)
  institutionCode  String   @db.VarChar(36)
  institutionLabel String   @db.VarChar(100)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, institutionId, destAccountNo])
  @@index([userId, destAccountLabel], map: "beneficiary_user_id_idx")
}

model Transfer {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  userId           String
  destinationType  String   @db.VarChar(20)
  srcAccountNo     String   @db.VarChar(20)
  srcAccountType   String   @db.VarChar(20)
  status           String   @db.VarChar(20)
  srcAccountLabel  String   @db.VarChar(255)
  currency         String   @db.VarChar(3)
  amount           Decimal  @db.Decimal(19, 2)
  destAccountNo    String   @db.VarChar(20)
  destAccountLabel String   @db.VarChar(255)
  description      String   @db.VarChar(255)
  institutionId    String   @db.VarChar(36)
  institutionCode  String   @db.VarChar(36)
  institutionLabel String   @db.VarChar(100)
  reference        String?  @db.VarChar(255)
  idempotencyKey   String   @default(uuid()) @db.VarChar(36)
  transactionDate  DateTime
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, transactionDate], map: "transfer_user_id_idx")
}

model BillSchedule {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  userId           String
  billType         String   @db.VarChar(20)
  biller           String   @db.VarChar(20)
  paymentFrequency String   @db.VarChar(20)
  srcAccountLabel  String   @db.VarChar(255)
  currency         String   @db.VarChar(3)
  amount           Decimal  @db.Decimal(19, 2)
  label            String   @db.VarChar(255)
  reference        String?  @db.VarChar(255)
  idempotencyKey   String   @default(uuid()) @db.VarChar(36)
  transactionDate  DateTime
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, transactionDate], map: "bill_schedule_user_id_idx")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

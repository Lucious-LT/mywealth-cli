/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * A JSON blob representing a contract note.
 */
export type OrderContract = {
    /**
     * The unique ID for the record. This is the ID that is used in all services and related records when referencing the record.
     */
    id: string;
    /**
     * The ID of the user that created the record.
     */
    createdBy: string;
    /**
     * Indicates when the record was created.
     */
    createdAt: string;
    /**
     * The ID of the user that last modified the record.
     */
    updatedBy: string;
    /**
     * Indicates when the record was last modified.
     */
    updatedAt: string;
    /**
     * Indicates if this is a deleted record
     */
    deleted: boolean;
    /**
     * An idempotency key
     */
    idempotencyKey?: string;
    /**
     * A unique identifier for the client that is generated by the crm service.
     */
    clientId: string;
    /**
     * A unique client code that is generated by the crm service
     */
    clientCode: string;
    /**
     * A label that describes the client
     */
    clientLabel: string;
    /**
     * The trading account code used for executing and settling trades for the client.
     */
    tradingAccountNo: string;
    /**
     * The trading sub account code used for executing and settling trades for the client.
     */
    tradingSubAccountNo?: string;
    /**
     * A label that describes the portfolio.
     */
    accountLabel: string;
    /**
     * A unique portfolio code that is generated by the investing service. This is required if the accountId is not provided.
     */
    accountNo: string;
    /**
     * A unique identifier for the portfolio that is generated by the investing service.
     */
    accountId: string;
    /**
     * The status of the contract
     */
    status: OrderContract.status;
    /**
     * A unique identifier for the order that is generated by the investing service.
     */
    orderId: string;
    /**
     * A unique order number that is generated by the investing service.
     */
    orderNo: string;
    /**
     * A label that describes the order
     */
    orderDesc: string;
    /**
     * A unique contract number that is generated by the investing service.
     */
    contractNo: string;
    /**
     * The market where the order was traded
     */
    marketCode: string;
    /**
     * The ID of the security traded.
     */
    secId: string;
    /**
     * The asset type of the order
     */
    assetType?: OrderContract.assetType;
    /**
     * Indicates the order side ie BUY  | SELL.
     */
    side: OrderContract.side;
    /**
     * The quantity traded in the contract.
     */
    contractQty: number;
    /**
     * The contract price for the trade
     */
    contractPrice: number;
    /**
     * The total consideration
     */
    consideration: number;
    /**
     * The contract fees
     */
    fees: number;
    /**
     * The contract commission
     */
    commission: number;
    /**
     * The contract total
     */
    contractTotal: number;
    /**
     * The contract currency
     */
    currency?: string;
    /**
     * The transaction date
     */
    transactionDate: string;
    /**
     * The settlement date
     */
    settlementDate: string;
    /**
     * The accounting journal ID used for posting the contract note.
     */
    contractJournalId?: string;
    /**
     * The accounting journal ID used for settling the trade.
     */
    settlementJournalId?: string;
    /**
     * The position ledger ID used for tracking the asset.
     */
    positionLedgerId?: string;
    /**
     * The agent Id if involved in the transaction
     */
    agentId?: string;
    /**
     * The custodian Id if involved in the transaction
     */
    custodianId?: string;
};

export namespace OrderContract {

    /**
     * The status of the contract
     */
    export enum status {
        PENDING = 'PENDING',
        POSTED = 'POSTED',
        REVERSED = 'REVERSED',
    }

    /**
     * The asset type of the order
     */
    export enum assetType {
        EQUITY = 'EQUITY',
        BOND = 'BOND',
        OPTION = 'OPTION',
        FUTURE = 'FUTURE',
    }

    /**
     * Indicates the order side ie BUY  | SELL.
     */
    export enum side {
        BUY = 'BUY',
        SELL = 'SELL',
    }


}


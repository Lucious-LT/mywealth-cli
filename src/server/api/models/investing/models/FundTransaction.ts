/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * A JSON blob representing a fund transaction. The fields marked with an * means that they are required.
 */
export type FundTransaction = {
    /**
     * The unique ID for the record. This is the ID that is used in all services and related records when referencing the record.
     */
    id: string;
    /**
     * The ID of the user that created the record.
     */
    createdBy: string;
    /**
     * Indicates when the record was created.
     */
    createdAt: string;
    /**
     * The ID of the user that last modified the record.
     */
    updatedBy: string;
    /**
     * Indicates when the record was last modified.
     */
    updatedAt: string;
    /**
     * Indicates if this is a deleted record
     */
    deleted: boolean;
    /**
     * The idempotency key for the request.
     * If a request is sent with an existing key, the existing record will be returned.
     *
     */
    idemPotencyId?: string;
    /**
     * The market || execution venue identifier for the order
     */
    marketCode: string;
    /**
     * The ID for the security to be traded.
     */
    secId: string;
    /**
     * A unique identifier for the client that is generated by the crm service and is required when submitting a new order.
     */
    clientId: string;
    /**
     * A unique identifier for the instrument in the position database
     */
    instrumentId: string;
    /**
     * A unique client code that is generated by the crm service and is populated by the investing service while validating an order.
     */
    clientCode: string;
    /**
     * A label that describes the client and is populated by the investing service while validating an order.
     */
    clientLabel: string;
    /**
     * Indicates the order type ie SUBSCRIPTION  | REDEMPTION.
     */
    orderType: FundTransaction.orderType;
    /**
     * The type of fund
     */
    fundType?: FundTransaction.fundType;
    /**
     * The current status of the order.
     */
    orderStatus?: FundTransaction.orderStatus;
    /**
     * A unique order number that is generated by the investing service.
     */
    orderNo: string;
    /**
     * A label that describes the order
     */
    orderDesc: string;
    /**
     * The quantity requested. This is validated using the security master instrument definition and will be calculated using the requested value and price if it is provided.
     */
    requestedQty: number;
    /**
     * When not provided, this is calculated using the requested quantity and the provided price or the current bid/offer price.
     */
    requestedVal: number;
    /**
     * The price used to process the transaction.
     */
    price: number;
    /**
     * Indicates the request date.
     */
    requestDate: string;
    /**
     * This must match the currency configured in the instrument definition.
     */
    currency: string;
    /**
     * The total consideration for the order
     */
    consideration: number;
    /**
     * The commission calculated for the order
     */
    commission: number;
    /**
     * The fees calculated for the order
     */
    fees: number;
    /**
     * The penalty calculated for the order for redemptions within the lock period
     */
    penalty: number;
    /**
     * The weighted average cost used to calculate the fund settlement value
     */
    avgCost: number;
    /**
     * The total value of the order +- commission and fees based on the side
     */
    totalValue: number;
    /**
     * Notes related to the record
     */
    notes?: string;
    /**
     * Indicates if the order should be auto approved
     */
    autoApprove: boolean;
    /**
     * Indicates if this is a full or partial redemption
     */
    fullRedemption: boolean;
    /**
     * Holds the accrued dividend on the redemption date
     */
    accruedDividend: number;
    /**
     * After redeeming units and this flag is true, the cash will be automatically paid out. If the flag is false, the cash will be left in the investment cash account and can be reinvested. The default value is false if it is not specified.
     */
    autoPayRedemption?: boolean;
    /**
     * The channel through which the transaction was submitted
     */
    channel: FundTransaction.channel;
    /**
     * A unique investment account code that is generated by the investing service.
     */
    accountNo: string;
    /**
     * A unique identifier for the investment account that is generated by the investing service.
     */
    accountId: string;
    /**
     * The investing account code used for executing and settling trades for the client. This is populated by the investing service when validating an order.
     */
    tradingAccountNo?: string;
    /**
     * The investing sub account code used for executing and settling trades for the client. This is populated by the investing service when validating an order.
     */
    tradingSubAccountNo?: string;
    /**
     * A label that describes the investment account and is populated by the investing service when validating an order.
     */
    accountLabel: string;
};

export namespace FundTransaction {

    /**
     * Indicates the order type ie SUBSCRIPTION  | REDEMPTION.
     */
    export enum orderType {
        SUBSCRIPTION = 'SUBSCRIPTION',
        REDEMPTION = 'REDEMPTION',
    }

    /**
     * The type of fund
     */
    export enum fundType {
        EQUITY = 'EQUITY',
        MONEY_MARKET = 'MONEY_MARKET',
        BOND = 'BOND',
        REAL_ESTATE = 'REAL_ESTATE',
        BALANCED = 'BALANCED',
        EXCHANGE_TRADED = 'EXCHANGE_TRADED',
        ETHICAL = 'ETHICAL',
        SECTOR = 'SECTOR',
        UMBRELLA = 'UMBRELLA',
    }

    /**
     * The current status of the order.
     */
    export enum orderStatus {
        PENDING = 'PENDING',
        APPROVED = 'APPROVED',
        FILLED = 'FILLED',
        CANCELED = 'CANCELED',
        REVERSED = 'REVERSED',
    }

    /**
     * The channel through which the transaction was submitted
     */
    export enum channel {
        NA = 'NA',
        WEB = 'WEB',
        MOBILE = 'MOBILE',
        USSD = 'USSD',
        ATM = 'ATM',
        POS = 'POS',
        BRANCH = 'BRANCH',
        EXEC_REPORT = 'EXEC_REPORT',
        FILE_UPLOAD = 'FILE_UPLOAD',
        API = 'API',
        EMAIL = 'EMAIL',
        SMS = 'SMS',
        IVR = 'IVR',
        KIOSK = 'KIOSK',
        CALL_CENTER = 'CALL_CENTER',
        OTHER = 'OTHER',
    }


}


/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

/**
 * A JSON blob representing an order. The fields marked with an * means that they are required.
 */
export type Order = {
    /**
     * The unique ID for the record. This is the ID that is used in all services and related records when referencing the record.
     */
    id: string;
    /**
     * The ID of the user that created the record.
     */
    createdBy: string;
    /**
     * Indicates when the record was created.
     */
    createdAt: string;
    /**
     * The ID of the user that last modified the record.
     */
    updatedBy: string;
    /**
     * Indicates when the record was last modified.
     */
    updatedAt: string;
    /**
     * Indicates if this is a deleted record
     */
    deleted: boolean;
    /**
     * The idempotency key for the request.
     * If a request is sent with an existing key, the existing record will be returned.
     *
     */
    idemPotencyId?: string;
    /**
     * The market || execution venue identifier for the order
     */
    marketCode: string;
    /**
     * The ID for the security to be traded.
     */
    secId: string;
    /**
     * A unique identifier for the client that is generated by the crm service and is populated by the investing service while validating an order
     */
    clientId: string;
    /**
     * A unique identifier for the instrument in the position database
     */
    instrumentId: string;
    /**
     * A unique client code that is generated by the crm service and is populated by the investing service while validating an order.
     */
    clientCode: string;
    /**
     * A label that describes the client and is populated by the investing service while validating an order.
     */
    clientLabel: string;
    /**
     * Indicates the order side ie BUY  | SELL.
     */
    side: Order.side;
    /**
     * Indicates how long the order should be valid for.
     */
    tif: Order.tif;
    /**
     * The current status of the order and this is updated based on execution reports from a trading venue.
     */
    orderStatus?: Order.orderStatus;
    /**
     * The current routing status of the order. This indicates the status of the order on the market integration engine.
     */
    routingStatus?: Order.routingStatus;
    /**
     * The text message describing a routing response
     */
    routingMessage?: string;
    /**
     * The text message describing the last execution report sent for a working order
     */
    executionMessage?: string;
    /**
     * A unique order number that is generated by the investing service.
     */
    orderNo: string;
    /**
     * A unique order # generated by the trading venue
     */
    marketOrderId?: string;
    /**
     * A label that describes the order
     */
    orderDesc: string;
    /**
     * The quantity requested. This is validated using the security master instrument definition.
     */
    requestedQty: number;
    /**
     * The quantity that has been filled and defaults to 0.0
     */
    filledQty: number;
    /**
     * Indicates when the order was accepted by the investing system.
     */
    requestTime: string;
    /**
     * Indicates when the order will expire if it has not been filled.
     */
    expires: string;
    /**
     * A limit price if you want the order to execute as a LIMIT order. If not provided the order is routed as a market order.
     */
    limitPrice?: number;
    /**
     * This must match the currency configured in the instrument definition.
     */
    currency: string;
    /**
     * The number of legs when placing order with advanced strategies
     */
    numberOfLegs: number;
    /**
     * The asset type for the order
     */
    assetType: Order.assetType;
    /**
     * The investing strategy for the order
     */
    orderStrategy?: Order.orderStrategy;
    /**
     * The total consideration for the order
     */
    consideration: number;
    /**
     * The commission calculated for the order
     */
    commission: number;
    /**
     * The fees calculated for the order
     */
    fees: number;
    /**
     * The total value of the order +- commission and fees based on the side
     */
    totalValue: number;
    /**
     * Returns the traded face value for bonds
     */
    faceValue?: number;
    /**
     * Notes related to the record
     */
    notes?: string;
    /**
     * Indicates if the order should be auto approved
     */
    autoApprove: boolean;
    /**
     * An execution instruction on how to match the order
     */
    allOrNone: boolean;
    /**
     * Indicates if a note generated for the order was reversed
     */
    contractNoteReversed: boolean;
    /**
     * The channel through which the transaction was submitted
     */
    channel: Order.channel;
    /**
     * A unique investment account code that is generated by the investing service.
     */
    accountNo: string;
    /**
     * A unique identifier for the investment account that is generated by the investing service.
     */
    accountId: string;
    /**
     * The investing account code used for executing and settling trades for the client. This is populated by the investing service when validating an order.
     */
    tradingAccountNo?: string;
    /**
     * The investing sub account code used for executing and settling trades for the client. This is populated by the investing service when validating an order.
     */
    tradingSubAccountNo?: string;
    /**
     * A label that describes the investment account and is populated by the investing service when validating an order.
     */
    accountLabel: string;
    openQuantity?: number;
};

export namespace Order {

    /**
     * Indicates the order side ie BUY  | SELL.
     */
    export enum side {
        BUY = 'BUY',
        SELL = 'SELL',
    }

    /**
     * Indicates how long the order should be valid for.
     */
    export enum tif {
        DAY = 'DAY',
        GOOD_TILL_DATE = 'GOOD_TILL_DATE',
        GOOD_TILL_CANCELLED = 'GOOD_TILL_CANCELLED',
    }

    /**
     * The current status of the order and this is updated based on execution reports from a trading venue.
     */
    export enum orderStatus {
        PENDING = 'PENDING',
        REJECTED = 'REJECTED',
        APPROVED = 'APPROVED',
        NEW = 'NEW',
        REPLACED = 'REPLACED',
        FILLED = 'FILLED',
        CANCELED = 'CANCELED',
        EXPIRED = 'EXPIRED',
        PENDING_CANCEL = 'PENDING_CANCEL',
        PARTIALLY_FILLED = 'PARTIALLY_FILLED',
    }

    /**
     * The current routing status of the order. This indicates the status of the order on the market integration engine.
     */
    export enum routingStatus {
        NA = 'NA',
        REJECTED = 'REJECTED',
        ACCEPTED = 'ACCEPTED',
        DELIVERED = 'DELIVERED',
    }

    /**
     * The asset type for the order
     */
    export enum assetType {
        EQUITY = 'EQUITY',
        BOND = 'BOND',
        OPTION = 'OPTION',
        FUTURE = 'FUTURE',
    }

    /**
     * The investing strategy for the order
     */
    export enum orderStrategy {
        CONDOR = 'CONDOR',
        COVERED_CALL = 'COVERED_CALL',
        COMBO = 'COMBO',
        MULTI_LEG = 'MULTI_LEG',
    }

    /**
     * The channel through which the transaction was submitted
     */
    export enum channel {
        NA = 'NA',
        WEB = 'WEB',
        MOBILE = 'MOBILE',
        USSD = 'USSD',
        ATM = 'ATM',
        POS = 'POS',
        BRANCH = 'BRANCH',
        EXEC_REPORT = 'EXEC_REPORT',
        FILE_UPLOAD = 'FILE_UPLOAD',
        API = 'API',
        EMAIL = 'EMAIL',
        SMS = 'SMS',
        IVR = 'IVR',
        KIOSK = 'KIOSK',
        CALL_CENTER = 'CALL_CENTER',
        OTHER = 'OTHER',
    }


}


/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { OrderLegRequest } from './OrderLegRequest';

/**
 * A JSON blob representing an order request. The fields marked with an * means that they are required.
 */
export type OrderRequest = {
    /**
     * A unique identifier for the investment account that is generated by the investing service.
     */
    accountId: string;
    /**
     * Indicates the order side ie BUY  | SELL.
     */
    side: OrderRequest.side;
    /**
     * Indicates how long the order should be valid for.
     */
    tif: OrderRequest.tif;
    /**
     * The market || execution venue identifier for the order
     */
    marketCode: string;
    /**
     * The ID for the security to be traded.
     */
    secId: string;
    /**
     * The quantity requested. This is validated using the security master instrument definition.
     */
    requestedQty: number;
    /**
     * A limit price if you want the order to execute as a LIMIT order. If not provided the order is routed as a market order.
     */
    limitPrice?: number;
    /**
     * The specified value must match the currency configured in the instrument definition.
     */
    currency: string;
    /**
     * The number of legs when placing order with advanced strategies
     */
    numberOfLegs: number;
    /**
     * The asset type for the order
     */
    assetType: OrderRequest.assetType;
    /**
     * The investing strategy for the order
     */
    orderStrategy?: OrderRequest.orderStrategy;
    /**
     * Required if submitting a COMBO or MULTI_LEG order
     */
    orderLegs?: Array<OrderLegRequest>;
    /**
     * The expiration date. This is required if you choose a 'GOOD_TILL_DATE' TIF rule
     */
    expires?: string;
    /**
     * Notes related to the record
     */
    notes?: string;
    /**
     * Indicates if the order should be auto approved
     */
    autoApprove: boolean;
    /**
     * The channel through which the transaction was submitted
     */
    channel?: OrderRequest.channel;
    /**
     * An execution instruction on how to match the order
     */
    allOrNone: boolean;
};

export namespace OrderRequest {

    /**
     * Indicates the order side ie BUY  | SELL.
     */
    export enum side {
        BUY = 'BUY',
        SELL = 'SELL',
    }

    /**
     * Indicates how long the order should be valid for.
     */
    export enum tif {
        DAY = 'DAY',
        GOOD_TILL_DATE = 'GOOD_TILL_DATE',
        GOOD_TILL_CANCELLED = 'GOOD_TILL_CANCELLED',
    }

    /**
     * The asset type for the order
     */
    export enum assetType {
        EQUITY = 'EQUITY',
        BOND = 'BOND',
        OPTION = 'OPTION',
        FUTURE = 'FUTURE',
    }

    /**
     * The investing strategy for the order
     */
    export enum orderStrategy {
        CONDOR = 'CONDOR',
        COVERED_CALL = 'COVERED_CALL',
        COMBO = 'COMBO',
        MULTI_LEG = 'MULTI_LEG',
    }

    /**
     * The channel through which the transaction was submitted
     */
    export enum channel {
        NA = 'NA',
        WEB = 'WEB',
        MOBILE = 'MOBILE',
        USSD = 'USSD',
        ATM = 'ATM',
        POS = 'POS',
        BRANCH = 'BRANCH',
        EXEC_REPORT = 'EXEC_REPORT',
        FILE_UPLOAD = 'FILE_UPLOAD',
        API = 'API',
        EMAIL = 'EMAIL',
        SMS = 'SMS',
        IVR = 'IVR',
        KIOSK = 'KIOSK',
        CALL_CENTER = 'CALL_CENTER',
        OTHER = 'OTHER',
    }


}


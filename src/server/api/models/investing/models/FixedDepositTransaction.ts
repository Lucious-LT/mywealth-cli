/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

import type { FixedDepositTransactionTranche } from './FixedDepositTransactionTranche';

/**
 * A JSON blob representing a fixed deposit transaction. The fields marked with an * means that they are required.
 */
export type FixedDepositTransaction = {
    /**
     * The unique ID for the record. This is the ID that is used in all services and related records when referencing the record.
     */
    id: string;
    /**
     * The ID of the user that created the record.
     */
    createdBy: string;
    /**
     * Indicates when the record was created.
     */
    createdAt: string;
    /**
     * The ID of the user that last modified the record.
     */
    updatedBy: string;
    /**
     * Indicates when the record was last modified.
     */
    updatedAt: string;
    /**
     * Indicates if this is a deleted record
     */
    deleted: boolean;
    /**
     * The principal amount
     */
    principal: number;
    /**
     * The total fees
     */
    totalFees: number;
    /**
     * The total amount
     */
    totalAmount: number;
    /**
     * Tranche of all additions and withdrawals for the transaction
     */
    transactionTranches: Array<FixedDepositTransactionTranche>;
    /**
     * The idempotency key for the request.
     * If a request is sent with an existing key, the existing record will be returned.
     *
     */
    idemPotencyId?: string;
    /**
     * A unique identifier for the client that is generated by the crm service and is required when submitting a new order.
     */
    clientId: string;
    /**
     * A unique client code that is generated by the crm service and is populated by the investing service while validating an order.
     */
    clientCode: string;
    /**
     * A label that describes the client and is populated by the investing service while validating an order.
     */
    clientLabel: string;
    /**
     * The current status of the order
     */
    status?: FixedDepositTransaction.status;
    /**
     * The roll over rule
     */
    rolloverRule?: FixedDepositTransaction.rolloverRule;
    /**
     * A unique order number that is generated by the investing service.
     */
    orderNo: string;
    /**
     * A label that describes the order
     */
    orderDesc: string;
    /**
     * The rate used to book the transaction.
     */
    interestRate: number;
    /**
     * This must match the currency configured in the product definition.
     */
    currency: string;
    /**
     * The investment start date.
     */
    startDate: string;
    /**
     * The investment tenor
     */
    tenor: number;
    /**
     * The expected maturity date.
     */
    maturityDate: string;
    /**
     * The expected interest
     */
    expectedInterest: number;
    /**
     * The commission calculated for the order
     */
    commission: number;
    /**
     * The fees calculated for the order
     */
    fees: number;
    /**
     * The withholding tax calculated for the order
     */
    withholdingTax: number;
    /**
     * The penalty calculated for the investments terminated before maturity
     */
    penalty: number;
    /**
     * Notes related to the record
     */
    notes?: string;
    /**
     * Indicates if the order should be auto approved
     */
    autoApprove: boolean;
    /**
     * The journal ID used to start the transaction
     */
    startingJournalId?: string;
    /**
     * The date the transaction was terminated
     */
    terminationDate?: string;
    /**
     * The journal ID used to process the termination
     */
    terminationJournalId?: string;
    /**
     * The position transfer date is used to indicate that the asset record was migrated from another system and accruals before this date will not be posted
     */
    positionTransferDate?: string;
    /**
     * A reference code for the record in an upstream system
     */
    refCode: string;
    /**
     * The product interest basis
     */
    interestBasis: FixedDepositTransaction.interestBasis;
    /**
     * The channel through which the transaction was submitted
     */
    channel: FixedDepositTransaction.channel;
    /**
     * A unique identifier for the product that is generated by the investing service.
     */
    productId: string;
    /**
     * A unique investment account code that is generated by the investing service.
     */
    accountNo: string;
    /**
     * A unique identifier for the investment account that is generated by the investing service.
     */
    accountId: string;
    /**
     * A unique product code that is generated by the investing service.
     */
    productCode: string;
    principalBalance?: number;
    effectiveRate?: number;
    /**
     * A label that describes the product and is populated by the investing service when validating an order.
     */
    productLabel: string;
    /**
     * The investing account code used for executing and settling trades for the client. This is populated by the investing service when validating an order.
     */
    tradingAccountNo?: string;
    /**
     * The investing sub account code used for executing and settling trades for the client. This is populated by the investing service when validating an order.
     */
    tradingSubAccountNo?: string;
    /**
     * A label that describes the investment account and is populated by the investing service when validating an order.
     */
    accountLabel: string;
};

export namespace FixedDepositTransaction {

    /**
     * The current status of the order
     */
    export enum status {
        PENDING = 'PENDING',
        APPROVED = 'APPROVED',
        RUNNING = 'RUNNING',
        ROLLED_OVER = 'ROLLED_OVER',
        TERMINATED = 'TERMINATED',
        MATURED = 'MATURED',
        REVERSED = 'REVERSED',
    }

    /**
     * The roll over rule
     */
    export enum rolloverRule {
        PRINCIPAL = 'PRINCIPAL',
        PRINCIPAL_INTEREST = 'PRINCIPAL_INTEREST',
        INTEREST = 'INTEREST',
        NONE = 'NONE',
    }

    /**
     * The product interest basis
     */
    export enum interestBasis {
        ACTUAL360 = 'Actual360',
        ACTUAL365 = 'Actual365',
        ACTUAL364 = 'Actual364',
        ACTUAL_ACTUAL = 'ActualActual',
        THIRTY360US = 'Thirty360US',
        THIRTY360EUROPEAN = 'Thirty360European',
        THIRTY365 = 'Thirty365',
    }

    /**
     * The channel through which the transaction was submitted
     */
    export enum channel {
        NA = 'NA',
        WEB = 'WEB',
        MOBILE = 'MOBILE',
        USSD = 'USSD',
        ATM = 'ATM',
        POS = 'POS',
        BRANCH = 'BRANCH',
        EXEC_REPORT = 'EXEC_REPORT',
        FILE_UPLOAD = 'FILE_UPLOAD',
        API = 'API',
        EMAIL = 'EMAIL',
        SMS = 'SMS',
        IVR = 'IVR',
        KIOSK = 'KIOSK',
        CALL_CENTER = 'CALL_CENTER',
        OTHER = 'OTHER',
    }


}

